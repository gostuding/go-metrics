{
    "Issues": [
        {
            "FromLinter": "goconst",
            "Text": "string `%x` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\treq.Header.Add(\"HashSHA256\", fmt.Sprintf(\"%x\", h.Sum(nil)))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/agent/metrics/runtimemetrics.go",
                "Offset": 7315,
                "Line": 263,
                "Column": 44
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 321,
                "Line": 21,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx  context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 2045,
                "Line": 100,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 3996,
                "Line": 182,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 5909,
                "Line": 268,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx     context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 8853,
                "Line": 396,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx     context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 10026,
                "Line": 444,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx     context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 11777,
                "Line": 519,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "containedctx",
            "Text": "found a struct that contains a context.Context field",
            "Severity": "error",
            "SourceLines": [
                "\t\tctx     context.Context"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/handlers_test.go",
                "Offset": 12810,
                "Line": 558,
                "Column": 3
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `gzip` has 4 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\tif !r.isWriting && r.Header().Get(\"Content-Encoding\") == \"gzip\" {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 1079,
                "Line": 53,
                "Column": 59
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from external package is unwrapped: sig: func (*compress/gzip.Writer).Close() error",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn size, err"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 1406,
                "Line": 64,
                "Column": 16
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from interface method should be wrapped: sig: func (net/http.ResponseWriter).Write([]byte) (int, error)",
            "Severity": "error",
            "SourceLines": [
                "\treturn r.ResponseWriter.Write(b)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 1421,
                "Line": 66,
                "Column": 9
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `text/html` has 3 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\tcontentType := r.Header().Get(\"Content-Type\") == \"application/json\" || r.Header().Get(\"Content-Type\") == \"text/html\""
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 1609,
                "Line": 70,
                "Column": 107
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from external package is unwrapped: sig: func compress/gzip.NewReader(r io.Reader) (*compress/gzip.Reader, error)",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, err"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 2027,
                "Line": 89,
                "Column": 15
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from external package is unwrapped: sig: func (*compress/gzip.Reader).Read(p []byte) (n int, err error)",
            "Severity": "error",
            "SourceLines": [
                "\treturn c.gzip.Read(p)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 2146,
                "Line": 95,
                "Column": 9
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from interface method should be wrapped: sig: func (io.Closer).Close() error",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn err"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 2247,
                "Line": 100,
                "Column": 10
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from external package is unwrapped: sig: func (*compress/gzip.Reader).Close() error",
            "Severity": "error",
            "SourceLines": [
                "\treturn c.gzip.Close()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 2262,
                "Line": 102,
                "Column": 9
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `cr.Close` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t\tdefer cr.Close()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 2747,
                "Line": 116,
                "Column": 19
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `Server logger` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t\t\"Server logger\","
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 3242,
                "Line": 135,
                "Column": 5
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `type` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t\t\"type\", \"request\","
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 3263,
                "Line": 136,
                "Column": 5
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `uri` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t\t\"uri\", r.RequestURI,"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 3286,
                "Line": 137,
                "Column": 5
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "unparam",
            "Text": "`newHashWriter` - `wh` is unused",
            "Severity": "error",
            "SourceLines": [
                "func newHashWriter(r http.ResponseWriter, key []byte, wh bool) *hashWriter {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 3694,
                "Line": 159,
                "Column": 55
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "appendAssign: append result not assigned to the same slice",
            "Severity": "error",
            "SourceLines": [
                "\t\tdata := append(r.body[:], b[:]...)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 3861,
                "Line": 165,
                "Column": 11
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `HashSHA256` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\tr.Header().Set(\"HashSHA256\", fmt.Sprintf(\"%x\", h.Sum(nil)))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 4067,
                "Line": 172,
                "Column": 18
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "wrapcheck",
            "Text": "error returned from interface method should be wrapped: sig: func (net/http.ResponseWriter).Write([]byte) (int, error)",
            "Severity": "error",
            "SourceLines": [
                "\treturn r.ResponseWriter.Write(b)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 4123,
                "Line": 174,
                "Column": 9
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `read request body error: %w` has 3 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, fmt.Errorf(\"read request body error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 4294,
                "Line": 180,
                "Column": 26
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `r.Body.Close` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\tdefer r.Body.Close()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/middleware.go",
                "Offset": 4352,
                "Line": 182,
                "Column": 20
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `mType` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\tbase:   getMetricsArgs{mType: chi.URLParam(r, \"mType\"), mName: chi.URLParam(r, \"mName\")},"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 274,
                "Line": 15,
                "Column": 49
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "unconvert",
            "Text": "unnecessary conversion",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t_, err = w.Write([]byte(body))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 1139,
                "Line": 39,
                "Column": 27
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "unconvert",
            "Text": "unnecessary conversion",
            "Severity": "error",
            "SourceLines": [
                "\t\t_, err = w.Write([]byte(body))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 1732,
                "Line": 59,
                "Column": 26
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `write data to client error: %w` has 4 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tlogger.Warnf(\"write data to client error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 1774,
                "Line": 61,
                "Column": 17
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "unconvert",
            "Text": "unnecessary conversion",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t_, err = w.Write([]byte(body))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 2106,
                "Line": 71,
                "Column": 27
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "whitespace",
            "Text": "unnecessary trailing newline",
            "Severity": "error",
            "SourceLines": [
                "",
                "\t})"
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": [
                    "\t})"
                ],
                "Inline": null
            },
            "LineRange": {
                "From": 129,
                "To": 130
            },
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 0,
                "Line": 129,
                "Column": 0
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "whitespace",
            "Text": "unnecessary trailing newline",
            "Severity": "error",
            "SourceLines": [
                "",
                "\t})"
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": [
                    "\t})"
                ],
                "Inline": null
            },
            "LineRange": {
                "From": 141,
                "To": 142
            },
            "Pos": {
                "Filename": "internal/server/router.go",
                "Offset": 0,
                "Line": 141,
                "Column": 0
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "govet",
            "Text": "fieldalignment: struct with 240 pointer bytes could be 232",
            "Severity": "error",
            "SourceLines": [
                "type Server struct {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner.go",
                "Offset": 226,
                "Line": 21,
                "Column": 13
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "captLocal: `IP' should not be capitalized",
            "Severity": "error",
            "SourceLines": [
                "func createMemServer(IP string) (*Server, error) {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 186,
                "Line": 13,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errorlint",
            "Text": "non-wrapping format verb for fmt.Errorf. Use `%w` to format errors",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, fmt.Errorf(\"logger create error: %v\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 313,
                "Line": 16,
                "Column": 53
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errorlint",
            "Text": "non-wrapping format verb for fmt.Errorf. Use `%w` to format errors",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, fmt.Errorf(\"config create error: %v\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 415,
                "Line": 20,
                "Column": 53
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `runnedSrv.RunServer` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\tgo runnedSrv.RunServer()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 1032,
                "Line": 39,
                "Column": 24
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `srvRunned.RunServer` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\tgo srvRunned.RunServer()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 1915,
                "Line": 76,
                "Column": 24
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `tt.server.StopServer` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\ttt.server.StopServer() //nolint:wrapcheck // <- senselessly"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/runner_test.go",
                "Offset": 2449,
                "Line": 103,
                "Column": 24
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "godot",
            "Text": "Sentence should start with a capital letter",
            "Severity": "error",
            "SourceLines": [
                "// 1. data storage from RAM;"
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": [
                    "// 1. Data storage from RAM;"
                ],
                "Inline": null
            },
            "Pos": {
                "Filename": "internal/server/storage/doc.go",
                "Offset": 0,
                "Line": 4,
                "Column": 7
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "godot",
            "Text": "Sentence should start with a capital letter",
            "Severity": "error",
            "SourceLines": [
                "// 2. data storage in a database (postgresql)."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": [
                    "// 2. Data storage in a database (postgresql)."
                ],
                "Inline": null
            },
            "Pos": {
                "Filename": "internal/server/storage/doc.go",
                "Offset": 0,
                "Line": 6,
                "Column": 7
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "lll",
            "Text": "line is 137 characters",
            "Severity": "error",
            "SourceLines": [
                "\tdsnString      = \"host=localhost user=postgres database=metrics\" // Connection strin for SQLStore's test. Corrects it for your database."
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_base_test.go",
                "Offset": 0,
                "Line": 15,
                "Column": 0
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "commentFormatting: put a space between `//` and comment text",
            "Severity": "error",
            "SourceLines": [
                "\t//Create new Memory Storage example. For restore storage use 'restoreStorage' as true."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": null,
                "Inline": {
                    "StartCol": 1,
                    "Length": 86,
                    "NewString": "// Create new Memory Storage example. For restore storage use 'restoreStorage' as true."
                }
            },
            "Pos": {
                "Filename": "internal/server/storage/example_base_test.go",
                "Offset": 647,
                "Line": 25,
                "Column": 2
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "commentFormatting: put a space between `//` and comment text",
            "Severity": "error",
            "SourceLines": [
                "\t//..."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": null,
                "Inline": {
                    "StartCol": 1,
                    "Length": 5,
                    "NewString": "// ..."
                }
            },
            "Pos": {
                "Filename": "internal/server/storage/example_base_test.go",
                "Offset": 922,
                "Line": 32,
                "Column": 2
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "commentFormatting: put a space between `//` and comment text",
            "Severity": "error",
            "SourceLines": [
                "\t//..."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": null,
                "Inline": {
                    "StartCol": 1,
                    "Length": 5,
                    "NewString": "// ..."
                }
            },
            "Pos": {
                "Filename": "internal/server/storage/example_base_test.go",
                "Offset": 1395,
                "Line": 50,
                "Column": 2
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleMemStorage_UpdateJSONSlice() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 1705,
                "Line": 76,
                "Column": 42
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_Update() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 3462,
                "Line": 145,
                "Column": 33
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_GetMetric() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 3978,
                "Line": 164,
                "Column": 36
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_UpdateJSON() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 4529,
                "Line": 186,
                "Column": 37
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_UpdateJSONSlice() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 4926,
                "Line": 198,
                "Column": 42
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_GetMetricJSON() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 5337,
                "Line": 209,
                "Column": 40
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "testableexamples",
            "Text": "missing output for example, go test can't validate it",
            "Severity": "error",
            "SourceLines": [
                "func ExampleSQLStorage_PingDB() {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/example_test.go",
                "Offset": 5870,
                "Line": 224,
                "Column": 33
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "commentFormatting: put a space between `//` and comment text",
            "Severity": "error",
            "SourceLines": [
                "\t//memStorage contains metrics data in memory."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": null,
                "Inline": {
                    "StartCol": 1,
                    "Length": 45,
                    "NewString": "// memStorage contains metrics data in memory."
                }
            },
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 290,
                "Line": 24,
                "Column": 2
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "govet",
            "Text": "fieldalignment: struct with 32 pointer bytes could be 24",
            "Severity": "error",
            "SourceLines": [
                "\tMemStorage struct {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 348,
                "Line": 25,
                "Column": 13
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "gocritic",
            "Text": "commentFormatting: put a space between `//` and comment text",
            "Severity": "error",
            "SourceLines": [
                "\t//metric contains data about one metric."
            ],
            "Replacement": {
                "NeedOnlyDelete": false,
                "NewLines": null,
                "Inline": {
                    "StartCol": 1,
                    "Length": 40,
                    "NewString": "// metric contains data about one metric."
                }
            },
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 863,
                "Line": 34,
                "Column": 2
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "govet",
            "Text": "fieldalignment: struct with 48 pointer bytes could be 40",
            "Severity": "error",
            "SourceLines": [
                "\tmetric struct {"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 912,
                "Line": 35,
                "Column": 9
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `gauge value convert error: %w` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\treturn fmt.Errorf(\"gauge value convert error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 1983,
                "Line": 69,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `counter value convert error: %w` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\treturn fmt.Errorf(\"counter value convert error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 2187,
                "Line": 77,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `metric type incorrect. Availible types are: guage or counter` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn errors.New(\"metric type incorrect. Availible types are: guage or counter\")"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 2321,
                "Line": 83,
                "Column": 21
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.Save` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\tms.Save()"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 2424,
                "Line": 86,
                "Column": 10
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `%d` has 3 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\t\treturn fmt.Sprintf(\"%d\", val), nil"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 2952,
                "Line": 110,
                "Column": 24
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `metric '%s' with type '%s' not found` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\treturn \"\", fmt.Errorf(\"metric '%s' with type '%s' not found\", mName, mType)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3003,
                "Line": 114,
                "Column": 24
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `<!doctype html> <html lang='en'> <head> <meta charset='utf-8'> <title>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0442\u0440\u0438\u043a</title></head>` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\tbody := \"<!doctype html> <html lang='en'> <head> <meta charset='utf-8'> <title>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0442\u0440\u0438\u043a</title></head>\""
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3267,
                "Line": 120,
                "Column": 10
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "nolintlint",
            "Text": "directive `//nolint:goconst` should provide explanation such as `//nolint:goconst // this is why`",
            "Severity": "error",
            "SourceLines": [
                "\tbody += \"<body><header><h1><p>Metrics list</p></h1></header>\" //nolint:goconst"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3443,
                "Line": 121,
                "Column": 64
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "nolintlint",
            "Text": "directive `//nolint:goconst` should provide explanation such as `//nolint:goconst // this is why`",
            "Severity": "error",
            "SourceLines": [
                "\tbody += \"<h1><p>Gauges</p></h1>\" //nolint:goconst"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3506,
                "Line": 123,
                "Column": 35
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "nolintlint",
            "Text": "directive `//nolint:goconst` should provide explanation such as `//nolint:goconst // this is why`",
            "Severity": "error",
            "SourceLines": [
                "\tbody += \"<h1><p>Counters</p></h1>\" //nolint:goconst"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3747,
                "Line": 130,
                "Column": 37
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "nolintlint",
            "Text": "directive `//nolint:goconst` should provide explanation such as `//nolint:goconst // this is why`",
            "Severity": "error",
            "SourceLines": [
                "\tbody += \"</body></html>\" //nolint:goconst"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 3953,
                "Line": 136,
                "Column": 27
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `metric type error, use counter like int64 or gauge like float64` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, errors.New(\"metric type error, use counter like int64 or gauge like float64\")"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 4479,
                "Line": 158,
                "Column": 26
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `save metric error: %w` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\t\treturn nil, fmt.Errorf(\"save metric error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 5236,
                "Line": 185,
                "Column": 27
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `json conver error: %w` has 5 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\treturn nil, fmt.Errorf(\"json conver error: %w\", err)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage.go",
                "Offset": 5621,
                "Line": 198,
                "Column": 26
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.Update` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.Update(ctx, m.MType, m.ID, \"1\")"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 8564,
                "Line": 320,
                "Column": 13
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.updateOneMetric` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.updateOneMetric(m)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 8698,
                "Line": 326,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetric` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetric(ctx, m.MType, m.ID)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 8813,
                "Line": 333,
                "Column": 16
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetricJSON` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetricJSON(ctx, []byte(mString))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 8938,
                "Line": 339,
                "Column": 20
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.UpdateJSON` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.UpdateJSON(ctx, []byte(mString))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 9065,
                "Line": 345,
                "Column": 17
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.UpdateJSONSlice` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.UpdateJSONSlice(ctx, []byte(mStringSlice))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 9203,
                "Line": 351,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetricsHTML` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetricsHTML(ctx)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 9337,
                "Line": 357,
                "Column": 21
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.Update` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.Update(ctx, m.MType, m.ID, \"1\")"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 9799,
                "Line": 372,
                "Column": 13
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.updateOneMetric` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.updateOneMetric(ctx, m, ms.con)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 9933,
                "Line": 378,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetric` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetric(ctx, m.MType, m.ID)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 10061,
                "Line": 385,
                "Column": 16
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetricJSON` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetricJSON(ctx, []byte(mString))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 10186,
                "Line": 391,
                "Column": 20
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.UpdateJSON` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.UpdateJSON(ctx, []byte(mString))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 10313,
                "Line": 397,
                "Column": 17
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.UpdateJSONSlice` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.UpdateJSONSlice(ctx, []byte(mStringSlice))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 10451,
                "Line": 403,
                "Column": 22
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "errcheck",
            "Text": "Error return value of `ms.GetMetricsHTML` is not checked",
            "Severity": "error",
            "SourceLines": [
                "\t\t\tms.GetMetricsHTML(ctx)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/mem_storage_test.go",
                "Offset": 10585,
                "Line": 409,
                "Column": 21
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `,` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\tquery := fmt.Sprintf(\"CREATE TABLE  IF NOT EXISTS %s  (%s);\", name, strings.Join(items, \",\"))"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/sql_functions.go",
                "Offset": 2014,
                "Line": 72,
                "Column": 90
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "dupl",
            "Text": "102-121 lines are duplicate of `internal/server/storage/sql_functions.go:124-143`",
            "Severity": "error",
            "SourceLines": [
                "func (ms *SQLStorage) getCounter(ctx context.Context, name string) (*int64, error) {",
                "\trows, err := ms.con.QueryContext(ctx, \"Select value from counters where name=$1;\", name)",
                "\tif err != nil {",
                "\t\treturn nil, fmt.Errorf(\"get value error: %w\", err)",
                "\t}",
                "\tdefer rows.Close() //nolint:errcheck //<-senselessly",
                "\tif rows.Err() != nil {",
                "\t\treturn nil, fmt.Errorf(\"get counter metric rows error: %w\", err)",
                "\t}",
                "\tif !rows.Next() {",
                "\t\tvalue := int64(0)",
                "\t\treturn &value, fmt.Errorf(\"counter value (%s) is absent\", name)",
                "\t}",
                "\tvar value int64",
                "\terr = rows.Scan(&value)",
                "\tif err != nil {",
                "\t\treturn nil, fmt.Errorf(\"scan counter value (%s) error: %w\", name, err)",
                "\t}",
                "\treturn &value, nil",
                "}"
            ],
            "Replacement": null,
            "LineRange": {
                "From": 102,
                "To": 121
            },
            "Pos": {
                "Filename": "internal/server/storage/sql_functions.go",
                "Offset": 0,
                "Line": 102,
                "Column": 0
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "dupl",
            "Text": "124-143 lines are duplicate of `internal/server/storage/sql_functions.go:102-121`",
            "Severity": "error",
            "SourceLines": [
                "func (ms *SQLStorage) getGauge(ctx context.Context, name string) (*float64, error) {",
                "\trows, err := ms.con.QueryContext(ctx, \"Select value from gauges where name=$1;\", name)",
                "\tif err != nil {",
                "\t\treturn nil, fmt.Errorf(\"select value error: %w\", err)",
                "\t}",
                "\tdefer rows.Close() //nolint:errcheck //<-senselessly",
                "\tif rows.Err() != nil {",
                "\t\treturn nil, fmt.Errorf(\"get gauge metric rows error: %w\", err)",
                "\t}",
                "\tif !rows.Next() {",
                "\t\tvalue := float64(0.0)",
                "\t\treturn &value, fmt.Errorf(\"gauge value (%s) is absent\", name)",
                "\t}",
                "\tvar value float64",
                "\terr = rows.Scan(&value)",
                "\tif err != nil {",
                "\t\treturn nil, fmt.Errorf(\"scan gauge value (%s) error: %w\", name, err)",
                "\t}",
                "\treturn &value, nil",
                "}"
            ],
            "Replacement": null,
            "LineRange": {
                "From": 124,
                "To": 143
            },
            "Pos": {
                "Filename": "internal/server/storage/sql_functions.go",
                "Offset": 0,
                "Line": 124,
                "Column": 0
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        },
        {
            "FromLinter": "goconst",
            "Text": "string `<nav><p>%d. %s</p></nav>` has 2 occurrences, make it a constant",
            "Severity": "error",
            "SourceLines": [
                "\t\tbody += fmt.Sprintf(\"<nav><p>%d. %s</p></nav>\", index+1, value)"
            ],
            "Replacement": null,
            "Pos": {
                "Filename": "internal/server/storage/sql_storage.go",
                "Offset": 2421,
                "Line": 92,
                "Column": 23
            },
            "ExpectNoLint": false,
            "ExpectedNoLintLinter": ""
        }
    ],
    "Report": {
        "Linters": [
            {
                "Name": "asasalint",
                "Enabled": true
            },
            {
                "Name": "asciicheck",
                "Enabled": true
            },
            {
                "Name": "bidichk"
            },
            {
                "Name": "bodyclose",
                "Enabled": true
            },
            {
                "Name": "containedctx",
                "Enabled": true
            },
            {
                "Name": "contextcheck"
            },
            {
                "Name": "cyclop"
            },
            {
                "Name": "decorder"
            },
            {
                "Name": "deadcode"
            },
            {
                "Name": "depguard"
            },
            {
                "Name": "dogsled"
            },
            {
                "Name": "dupl",
                "Enabled": true
            },
            {
                "Name": "dupword",
                "Enabled": true
            },
            {
                "Name": "durationcheck",
                "Enabled": true
            },
            {
                "Name": "errcheck",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "errchkjson"
            },
            {
                "Name": "errname",
                "Enabled": true
            },
            {
                "Name": "errorlint",
                "Enabled": true
            },
            {
                "Name": "execinquery",
                "Enabled": true
            },
            {
                "Name": "exhaustive",
                "Enabled": true
            },
            {
                "Name": "exhaustivestruct"
            },
            {
                "Name": "exhaustruct"
            },
            {
                "Name": "exportloopref"
            },
            {
                "Name": "forbidigo"
            },
            {
                "Name": "forcetypeassert"
            },
            {
                "Name": "funlen"
            },
            {
                "Name": "gci"
            },
            {
                "Name": "ginkgolinter"
            },
            {
                "Name": "gocheckcompilerdirectives",
                "Enabled": true
            },
            {
                "Name": "gochecknoglobals"
            },
            {
                "Name": "gochecknoinits"
            },
            {
                "Name": "gocognit"
            },
            {
                "Name": "goconst",
                "Enabled": true
            },
            {
                "Name": "gocritic",
                "Enabled": true
            },
            {
                "Name": "gocyclo"
            },
            {
                "Name": "godot",
                "Enabled": true
            },
            {
                "Name": "godox"
            },
            {
                "Name": "goerr113"
            },
            {
                "Name": "gofmt",
                "Enabled": true
            },
            {
                "Name": "gofumpt"
            },
            {
                "Name": "goheader"
            },
            {
                "Name": "goimports",
                "Enabled": true
            },
            {
                "Name": "golint"
            },
            {
                "Name": "gomnd",
                "Enabled": true
            },
            {
                "Name": "gomoddirectives"
            },
            {
                "Name": "gomodguard"
            },
            {
                "Name": "goprintffuncname",
                "Enabled": true
            },
            {
                "Name": "gosec",
                "Enabled": true
            },
            {
                "Name": "gosimple",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "gosmopolitan"
            },
            {
                "Name": "govet",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "grouper",
                "Enabled": true
            },
            {
                "Name": "ifshort"
            },
            {
                "Name": "importas"
            },
            {
                "Name": "ineffassign",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "interfacebloat"
            },
            {
                "Name": "interfacer"
            },
            {
                "Name": "ireturn"
            },
            {
                "Name": "lll",
                "Enabled": true
            },
            {
                "Name": "loggercheck"
            },
            {
                "Name": "maintidx"
            },
            {
                "Name": "makezero",
                "Enabled": true
            },
            {
                "Name": "maligned"
            },
            {
                "Name": "mirror"
            },
            {
                "Name": "misspell"
            },
            {
                "Name": "musttag"
            },
            {
                "Name": "nakedret"
            },
            {
                "Name": "nestif"
            },
            {
                "Name": "nilerr",
                "Enabled": true
            },
            {
                "Name": "nilnil",
                "Enabled": true
            },
            {
                "Name": "nlreturn"
            },
            {
                "Name": "noctx"
            },
            {
                "Name": "nonamedreturns"
            },
            {
                "Name": "nosnakecase"
            },
            {
                "Name": "nosprintfhostport",
                "Enabled": true
            },
            {
                "Name": "paralleltest"
            },
            {
                "Name": "prealloc",
                "Enabled": true
            },
            {
                "Name": "predeclared",
                "Enabled": true
            },
            {
                "Name": "promlinter"
            },
            {
                "Name": "reassign",
                "Enabled": true
            },
            {
                "Name": "revive",
                "Enabled": true
            },
            {
                "Name": "rowserrcheck",
                "Enabled": true
            },
            {
                "Name": "scopelint"
            },
            {
                "Name": "sqlclosecheck",
                "Enabled": true
            },
            {
                "Name": "staticcheck",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "structcheck"
            },
            {
                "Name": "stylecheck",
                "Enabled": true
            },
            {
                "Name": "tagalign"
            },
            {
                "Name": "tagliatelle"
            },
            {
                "Name": "tenv",
                "Enabled": true
            },
            {
                "Name": "testableexamples",
                "Enabled": true
            },
            {
                "Name": "testpackage"
            },
            {
                "Name": "thelper",
                "Enabled": true
            },
            {
                "Name": "tparallel",
                "Enabled": true
            },
            {
                "Name": "typecheck",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "unconvert",
                "Enabled": true
            },
            {
                "Name": "unparam",
                "Enabled": true
            },
            {
                "Name": "unused",
                "Enabled": true,
                "EnabledByDefault": true
            },
            {
                "Name": "usestdlibvars",
                "Enabled": true
            },
            {
                "Name": "varcheck"
            },
            {
                "Name": "varnamelen"
            },
            {
                "Name": "wastedassign",
                "Enabled": true
            },
            {
                "Name": "whitespace",
                "Enabled": true
            },
            {
                "Name": "wrapcheck",
                "Enabled": true
            },
            {
                "Name": "wsl"
            },
            {
                "Name": "nolintlint",
                "Enabled": true
            },
            {
                "Name": "zerologlint"
            }
        ]
    }
}